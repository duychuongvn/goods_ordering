entity User {
	id Long required
}
entity Order {
	id Long required
    orderDate ZonedDateTime
    status OrderStatus required
    deliveryStatus DeliveryStatus
    exchangeRateId String required
    remark String
    createdAt ZonedDateTime
    lastUpdatedAt ZonedDateTime
    createdBy String
    lastUpdatedBy String
}

enum OrderStatus {
   PENDING, CONFIRMED, DEPOSITED, PAID
}
enum DeliveryStatus {
	INIT, PICKED_UP, ON_BOARDING, ARRIVED, SENDING, DONE
}

entity OrderTracking {
	id Long required
    deliveryStatus DeliveryStatus
    dateTime ZonedDateTime
  	createdAt ZonedDateTime
    lastUpdatedAt ZonedDateTime
    createdBy String
    lastUpdatedBy String

}
entity OrderLineItem {
	id Long required
    referenceUrl String required
    originPrice BigDecimal
    salePrice BigDecimal
    tax	BigDecimal
    goodsName String
    goodsId String
    goodsSKU String
    size String
    remark String
    images Blob
    source OrderSource
}

enum OrderSource {
   AEO_JP, ABC_MART
}
entity ShippingAddress {
	id Long required
    address1 String
    address2 String
    phone1 String
    phone2 String
    email1 String
    email2 String
    zipCode String
    city String
    district String
    defaultAddress Boolean
    createdAt ZonedDateTime
    lastUpdatedAt ZonedDateTime
    createdBy String
    lastUpdatedBy String
}

entity ExchangeRate {
  id String required
  rate BigDecimal
  createdAt ZonedDateTime
  lastUpdatedAt ZonedDateTime
  createdBy String
  lastUpdatedBy String
}
relationship ManyToOne {
	Order {user} to User
    Order {merchant} to User
    ShippingAddress {user} to User
}
relationship OneToMany {
	Order {orderLineItems} to OrderLineItem,
    Order {orderTrackings} to OrderTracking
}


// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
